import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { signOut, updatePassword, updateProfile } from 'firebase/auth'
import { auth } from '../services/firebase'

export default function Profile({ user }) {
  const navigate = useNavigate()
  const [isChangingPassword, setIsChangingPassword] = useState(false)
  const [passwordForm, setPasswordForm] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  })
  const [profileForm, setProfileForm] = useState({
    displayName: user?.displayName || ''
  })
  const [isUpdatingProfile, setIsUpdatingProfile] = useState(false)
  const [message, setMessage] = useState('')

  const handleSignOut = async () => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?')) {
      try {
        await signOut(auth)
        navigate('/login')
      } catch (error) {
        console.error('Sign out error:', error)
        alert('Kh√¥ng th·ªÉ ƒëƒÉng xu·∫•t. Vui l√≤ng th·ª≠ l·∫°i.')
      }
    }
  }

  const handleUpdateProfile = async (e) => {
    e.preventDefault()
    setIsUpdatingProfile(true)
    setMessage('')

    try {
      await updateProfile(user, {
        displayName: profileForm.displayName
      })
      setMessage('C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!')
    } catch (error) {
      console.error('Update profile error:', error)
      setMessage('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin. Vui l√≤ng th·ª≠ l·∫°i.')
    } finally {
      setIsUpdatingProfile(false)
    }
  }

  const handleChangePassword = async (e) => {
    e.preventDefault()
    setMessage('')

    if (passwordForm.newPassword !== passwordForm.confirmPassword) {
      setMessage('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp')
      return
    }

    if (passwordForm.newPassword.length < 6) {
      setMessage('M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±')
      return
    }

    try {
      await updatePassword(user, passwordForm.newPassword)
      setMessage('ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!')
      setPasswordForm({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      })
      setIsChangingPassword(false)
    } catch (error) {
      console.error('Change password error:', error)
      if (error.code === 'auth/requires-recent-login') {
        setMessage('Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u')
      } else {
        setMessage('Kh√¥ng th·ªÉ ƒë·ªïi m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i.')
      }
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="card text-center">
        <div className="text-4xl mb-3">üë§</div>
        <h1 className="text-2xl font-bold text-gray-900 mb-2">
          Th√¥ng tin c√° nh√¢n
        </h1>
        <p className="text-gray-600">
          Qu·∫£n l√Ω t√†i kho·∫£n v√† c√†i ƒë·∫∑t c·ªßa b·∫°n
        </p>
      </div>

      {/* Message */}
      {message && (
        <div className={`card ${
          message.includes('th√†nh c√¥ng') 
            ? 'bg-green-50 border-green-200' 
            : 'bg-red-50 border-red-200'
        }`}>
          <p className={`text-center ${
            message.includes('th√†nh c√¥ng') ? 'text-green-800' : 'text-red-800'
          }`}>
            {message}
          </p>
        </div>
      )}

      {/* Current User Info */}
      <div className="card">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">
          Th√¥ng tin t√†i kho·∫£n
        </h2>
        
        <div className="space-y-3 text-sm">
          <div className="flex justify-between">
            <span className="font-medium text-gray-700">Email:</span>
            <span className="text-gray-600">{user?.email}</span>
          </div>
          
          <div className="flex justify-between">
            <span className="font-medium text-gray-700">T√™n hi·ªÉn th·ªã:</span>
            <span className="text-gray-600">
              {user?.displayName || 'Ch∆∞a ƒë·∫∑t'}
            </span>
          </div>
          
          <div className="flex justify-between">
            <span className="font-medium text-gray-700">T√†i kho·∫£n ƒë∆∞·ª£c t·∫°o:</span>
            <span className="text-gray-600">
              {user?.metadata?.creationTime
                ? new Date(user.metadata.creationTime).toLocaleDateString('vi-VN')
                : 'Kh√¥ng x√°c ƒë·ªãnh'
              }
            </span>
          </div>
          
          <div className="flex justify-between">
            <span className="font-medium text-gray-700">ƒêƒÉng nh·∫≠p cu·ªëi:</span>
            <span className="text-gray-600">
              {user?.metadata?.lastSignInTime
                ? new Date(user.metadata.lastSignInTime).toLocaleDateString('vi-VN')
                : 'Kh√¥ng x√°c ƒë·ªãnh'
              }
            </span>
          </div>
        </div>
      </div>

      {/* Update Profile */}
      <div className="card">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">
          C·∫≠p nh·∫≠t th√¥ng tin
        </h2>
        
        <form onSubmit={handleUpdateProfile} className="space-y-4">
          <div>
            <label htmlFor="displayName" className="block text-sm font-medium text-gray-700 mb-1">
              T√™n hi·ªÉn th·ªã
            </label>
            <input
              type="text"
              id="displayName"
              value={profileForm.displayName}
              onChange={(e) => setProfileForm(prev => ({
                ...prev,
                displayName: e.target.value
              }))}
              placeholder="Nh·∫≠p t√™n hi·ªÉn th·ªã"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              disabled={isUpdatingProfile}
            />
          </div>
          
          <button
            type="submit"
            disabled={isUpdatingProfile}
            className="btn-primary"
          >
            {isUpdatingProfile ? 'ƒêang c·∫≠p nh·∫≠t...' : 'C·∫≠p nh·∫≠t th√¥ng tin'}
          </button>
        </form>
      </div>

      {/* Change Password */}
      <div className="card">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">
          ƒê·ªïi m·∫≠t kh·∫©u
        </h2>
        
        {!isChangingPassword ? (
          <button
            onClick={() => setIsChangingPassword(true)}
            className="btn-outline"
          >
            üîí ƒê·ªïi m·∫≠t kh·∫©u
          </button>
        ) : (
          <form onSubmit={handleChangePassword} className="space-y-4">
            <div>
              <label htmlFor="newPassword" className="block text-sm font-medium text-gray-700 mb-1">
                M·∫≠t kh·∫©u m·ªõi
              </label>
              <input
                type="password"
                id="newPassword"
                value={passwordForm.newPassword}
                onChange={(e) => setPasswordForm(prev => ({
                  ...prev,
                  newPassword: e.target.value
                }))}
                placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
                minLength="6"
              />
            </div>
            
            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-1">
                X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi
              </label>
              <input
                type="password"
                id="confirmPassword"
                value={passwordForm.confirmPassword}
                onChange={(e) => setPasswordForm(prev => ({
                  ...prev,
                  confirmPassword: e.target.value
                }))}
                placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
                minLength="6"
              />
            </div>
            
            <div className="flex gap-3">
              <button type="submit" className="btn-primary">
                ƒê·ªïi m·∫≠t kh·∫©u
              </button>
              <button
                type="button"
                onClick={() => {
                  setIsChangingPassword(false)
                  setPasswordForm({
                    currentPassword: '',
                    newPassword: '',
                    confirmPassword: ''
                  })
                }}
                className="btn-outline"
              >
                H·ªßy
              </button>
            </div>
          </form>
        )}
      </div>

      {/* App Settings */}
      <div className="card">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">
          C√†i ƒë·∫∑t ·ª©ng d·ª•ng
        </h2>
        
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <span className="text-gray-700">Th√¥ng b√°o push</span>
            <button className="text-gray-400 text-sm">
              S·∫Øp c√≥
            </button>
          </div>
          
          <div className="flex items-center justify-between">
            <span className="text-gray-700">Ch·∫ø ƒë·ªô t·ªëi</span>
            <button className="text-gray-400 text-sm">
              S·∫Øp c√≥
            </button>
          </div>
          
          <div className="flex items-center justify-between">
            <span className="text-gray-700">Ng√¥n ng·ªØ</span>
            <span className="text-gray-600 text-sm">Ti·∫øng Vi·ªát</span>
          </div>
        </div>
      </div>

      {/* App Info */}
      <div className="card">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">
          Th√¥ng tin ·ª©ng d·ª•ng
        </h2>
        
        <div className="space-y-2 text-sm text-gray-600">
          <div className="flex justify-between">
            <span>Phi√™n b·∫£n:</span>
            <span>1.0.0</span>
          </div>
          
          <div className="flex justify-between">
            <span>C·∫≠p nh·∫≠t cu·ªëi:</span>
            <span>{new Date().toLocaleDateString('vi-VN')}</span>
          </div>
        </div>
        
        <div className="mt-4 pt-4 border-t text-center">
          <p className="text-sm text-gray-500 mb-2">
            C·∫ßn h·ªó tr·ª£? Li√™n h·ªá:
          </p>
          <a 
            href="mailto:support@evcharging.vn" 
            className="text-blue-600 hover:text-blue-500 text-sm"
          >
            support@evcharging.vn
          </a>
        </div>
      </div>

      {/* Sign Out */}
      <div className="card">
        <button
          onClick={handleSignOut}
          className="btn-danger w-full"
        >
          üö™ ƒêƒÉng xu·∫•t
        </button>
      </div>
    </div>
  )
}
