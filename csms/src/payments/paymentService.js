import { TransactionModel } from '../models/transaction.js';
import { PaymentProcessor } from './paymentProcessor.js';
import { logger } from '../utils/logger.js';

/**
 * X·ª≠ l√Ω thanh to√°n khi k·∫øt th√∫c phi√™n s·∫°c
 * @param {string|number} transactionId
 * @returns {Object} K·∫øt qu·∫£ thanh to√°n
 */
export async function handleStopTransaction(transactionId) {
  try {
    logger.info(`üîÑ Starting payment processing for transaction: ${transactionId}`);

    // 1. L·∫•y d·ªØ li·ªáu phi√™n s·∫°c v·ª´a k·∫øt th√∫c t·ª´ Firestore
    let transaction = await TransactionModel.getTransactionById(transactionId);
    // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ l·∫°i sau 2 gi√¢y ƒë·ªÉ x·ª≠ l√Ω race condition
    if (!transaction) {
      logger.warn(`Transaction ${transactionId} not found, retrying in 2 seconds...`);
      await new Promise(resolve => setTimeout(resolve, 2000));
      transaction = await TransactionModel.getTransactionById(transactionId);
    }
    if (!transaction) {
      throw new Error(`Transaction not found in Firestore after retry: ${transactionId}`);
    }

    logger.info(`üìã Transaction data retrieved:`, {
      transactionId,
      userId: transaction.userId,
      stationId: transaction.stationId,
      connectorId: transaction.connectorId,
      energyConsumed: transaction.energyConsumed,
      status: transaction.status
    });

    // 2. Ki·ªÉm tra tr·∫°ng th√°i phi√™n (cho ph√©p c·∫£ Completed v√† Stopped)
    if (!['Completed', 'Stopped', 'Finishing'].includes(transaction.status)) {
      logger.warn(`‚ö†Ô∏è Transaction status not ready for payment: ${transaction.status}`);
      // Kh√¥ng throw error, ch·ªâ warning v√† ti·∫øp t·ª•c x·ª≠ l√Ω
    }

    // 3. Ki·ªÉm tra c√≥ userId kh√¥ng
    if (!transaction.userId) {
      throw new Error(`Transaction ${transactionId} has no userId for payment processing`);
    }

    // 4. Chu·∫©n b·ªã d·ªØ li·ªáu thanh to√°n ƒë·∫ßy ƒë·ªß
    const paymentData = {
      userId: transaction.userId,
      transactionId: transactionId,
      sessionId: transaction.sessionId || transactionId, // fallback n·∫øu kh√¥ng c√≥ sessionId
      sessionCost: transaction.cost || transaction.totalCost || 0, // l·∫•y cost ƒë√£ t√≠nh
      stationId: transaction.stationId,
      connectorId: transaction.connectorId,
      energyConsumed: transaction.energyConsumed || 0,
      duration: transaction.duration || 0,
      pricePerKwh: transaction.pricePerKwh || null,
      startTime: transaction.startTime,
      endTime: transaction.endTime
    };

    logger.info(`üí∞ Payment data prepared:`, {
      userId: paymentData.userId,
      sessionCost: paymentData.sessionCost,
      energyConsumed: paymentData.energyConsumed
    });

    // 5. X·ª≠ l√Ω thanh to√°n
    const paymentResult = await PaymentProcessor.processSessionPayment(paymentData);

    // 6. C·∫≠p nh·∫≠t tr·∫°ng th√°i payment cho transaction (t·∫°m b·ªè qua l·ªói Firestore)
    try {
      if (paymentResult.success) {
        await TransactionModel.updateTransactionPayment(transactionId, {
          paymentStatus: 'paid',
          paymentAmount: paymentResult.costCalculation.totalCost,
          paymentTime: new Date().toISOString(),
          finalBalance: paymentResult.payment.newBalance
          // costBreakdown: paymentResult.costCalculation // T·∫°m b·ªè ƒë·ªÉ test
        });

        logger.info(`‚úÖ Payment completed successfully for transaction ${transactionId}`);
      } else {
        await TransactionModel.updateTransactionPayment(transactionId, {
          paymentStatus: 'failed',
          paymentError: paymentResult.error,
          paymentTime: new Date().toISOString()
        });

        logger.error(`‚ùå Payment failed for transaction ${transactionId}: ${paymentResult.error}`);
      }
    } catch (updateError) {
      logger.warn(`‚ö†Ô∏è Could not update transaction ${transactionId} in Firestore:`, updateError.message);
      logger.info(`üí° Payment result was: ${paymentResult.success ? 'SUCCESS' : 'FAILED'}`);
    }

    return paymentResult;

  } catch (error) {
    logger.error(`üí• Error in handleStopTransaction for ${transactionId}:`, error);
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªói cho transaction
    try {
      await TransactionModel.updateTransactionPayment(transactionId, {
        paymentStatus: 'error',
        paymentError: error.message,
        paymentTime: new Date().toISOString()
      });
    } catch (updateError) {
      logger.error('Error updating transaction payment status:', updateError);
    }

    return {
      success: false,
      error: error.message,
      errorCode: 'PAYMENT_PROCESSING_ERROR',
      transactionId
    };
  }
}