import { realtimeService } from './realtime.js';
import { firestoreService } from './firestore.js';
import { logger } from '../utils/logger.js';

class SyncService {
  constructor() {
    this.isRunning = false;
    this.lastSyncTime = 0;
    // B·ªè auto sync interval - ch·ªâ sync khi c·∫ßn thi·∫øt
  }

  // Kh·ªüi ƒë·ªông service - kh√¥ng c·∫ßn interval
  start() {
    if (this.isRunning) {
      logger.warn('Sync service is already running');
      return;
    }

    this.isRunning = true;
    logger.info('üîÑ Starting on-demand sync service (Realtime -> Firestore)');
    
    // Kh√¥ng c·∫ßn sync t·ª± ƒë·ªông - ch·ªâ sync khi c√≥ station k·∫øt n·ªëi
    logger.info('‚úÖ On-demand sync service ready');
  }

  // D·ª´ng service
  stop() {
    if (!this.isRunning) return;

    this.isRunning = false;
    logger.info('‚èπÔ∏è Sync service stopped');
  }

  // Sync khi station k·∫øt n·ªëi (g·ªçi t·ª´ realtime service)
  async syncOnStationConnect(stationId, liveData) {
    if (!this.isRunning) return false;

    try {
      logger.info(`üîÑ Syncing station on connect: ${stationId}`);
      const result = await this.syncSingleStation(stationId, liveData);
      logger.info(`‚úÖ Station connect sync completed: ${stationId} -> ${result}`);
      return true;
    } catch (error) {
      logger.error(`Error syncing station on connect ${stationId}:`, error);
      return false;
    }
  }

  // Sync m·ªôt station c·ª• th·ªÉ
  async syncSingleStation(stationId, liveData) {
    // Ki·ªÉm tra station ƒë√£ t·ªìn t·∫°i trong Firestore ch∆∞a
    const existingStation = await firestoreService.getStation(stationId);

    // Chu·∫©n b·ªã d·ªØ li·ªáu Firestore v·ªõi c√°c tr∆∞·ªùng c·ªë ƒë·ªãnh
    const firestoreData = this.prepareFirestoreData(stationId, liveData, existingStation);

    if (existingStation) {
      // C·∫≠p nh·∫≠t station hi·ªán c√≥ - ch·ªâ update c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
      const updateData = this.getUpdateFields(firestoreData, existingStation);
      
      if (Object.keys(updateData).length > 0) {
        await firestoreService.saveStation({ id: stationId, ...updateData });
        logger.debug(`Updated station ${stationId} with:`, Object.keys(updateData));
        return 'updated';
      } else {
        return 'skipped';
      }
    } else {
      // T·∫°o station m·ªõi
      await firestoreService.saveStation(firestoreData);
      logger.info(`Created new station ${stationId} in Firestore`);
      return 'created';
    }
  }

  // Chu·∫©n b·ªã d·ªØ li·ªáu Firestore v·ªõi c√°c tr∆∞·ªùng c·ªë ƒë·ªãnh
  prepareFirestoreData(stationId, liveData, existingStation = null) {
    const baseData = {
      id: stationId,
      stationId: stationId,
      
      // Th√¥ng tin t·ª´ realtime database
      status: liveData.online ? 'online' : 'offline',
      lastHeartbeat: liveData.lastHeartbeat || null,
      
      // Th√¥ng tin c∆° b·∫£n t·ª´ realtime (n·∫øu c√≥)
      vendor: liveData.vendor || 'SIM',
      model: liveData.model || 'SIM-X',
      firmwareVersion: liveData.firmwareVersion || '1.0.0',
      
      // Owner ID - ∆∞u ti√™n t·ª´ realtime (Gmail), n·∫øu kh√¥ng c√≥ th√¨ d√πng default
      ownerId: liveData.ownerId || 'admin@charging.system',
      
      // Connector data t·ª´ realtime
      connectors: liveData.connectors || this.getDefaultConnectors(),
    };

    // N·∫øu l√† station m·ªõi, th√™m c√°c tr∆∞·ªùng m·∫∑c ƒë·ªãnh
    if (!existingStation) {
      baseData.stationName = `Tr·∫°m s·∫°c ${stationId}`;
      baseData.address = ''; // ƒê·ªÉ tr·ªëng ƒë·ªÉ owner t·ª± ƒëi·ªÅn
      baseData.latitude = null;
      baseData.longitude = null;
      baseData.createdAt = Date.now();
    } else {
      // Gi·ªØ l·∫°i c√°c th√¥ng tin ƒë√£ c√≥, nh∆∞ng ∆∞u ti√™n ownerId t·ª´ realtime
      baseData.stationName = existingStation.stationName || `Tr·∫°m s·∫°c ${stationId}`;
      baseData.address = existingStation.address || '';
      baseData.latitude = existingStation.latitude || null;
      baseData.longitude = existingStation.longitude || null;
      baseData.createdAt = existingStation.createdAt || Date.now();
      
      // ∆Øu ti√™n ownerId t·ª´ realtime, n·∫øu kh√¥ng c√≥ th√¨ gi·ªØ ownerId c≈©
      if (liveData.ownerId) {
        baseData.ownerId = liveData.ownerId; // ∆Øu ti√™n t·ª´ realtime
      } else {
        baseData.ownerId = existingStation.ownerId || 'admin@charging.system'; // Gi·ªØ c≈© ho·∫∑c m·∫∑c ƒë·ªãnh
      }
    }

    baseData.lastUpdated = Date.now();
    return baseData;
  }

  // L·∫•y c√°c tr∆∞·ªùng c·∫ßn update (ch·ªâ update n·∫øu c√≥ thay ƒë·ªïi)
  getUpdateFields(newData, existingData) {
    const fieldsToCheck = [
      'status', 
      'lastHeartbeat', 
      'vendor', 
      'model', 
      'firmwareVersion', 
      'ownerId',
      'connectors'
    ];

    const updateData = {};
    
    for (const field of fieldsToCheck) {
      if (newData[field] !== undefined && 
          JSON.stringify(newData[field]) !== JSON.stringify(existingData[field])) {
        updateData[field] = newData[field];
      }
    }

    // Lu√¥n c·∫≠p nh·∫≠t lastUpdated
    updateData.lastUpdated = newData.lastUpdated;

    return updateData;
  }

  // T·∫°o connectors m·∫∑c ƒë·ªãnh
  getDefaultConnectors() {
    return {
      1: {
        status: 'Available',
        errorCode: 'NoError',
        info: null,
        vendorId: null,
        vendorErrorCode: null,
        lastUpdate: Date.now()
      },
      2: {
        status: 'Available',
        errorCode: 'NoError',
        info: null,
        vendorId: null,
        vendorErrorCode: null,
        lastUpdate: Date.now()
      }
    };
  }

  // Sync th·ªß c√¥ng cho m·ªôt station c·ª• th·ªÉ
  async forceSyncStation(stationId) {
    try {
      logger.info(`üîÑ Force syncing station: ${stationId}`);
      
      const liveData = await realtimeService.getStationLiveData(stationId);
      if (!liveData) {
        logger.warn(`No live data found for station: ${stationId}`);
        return false;
      }

      const result = await this.syncSingleStation(stationId, liveData);
      logger.info(`‚úÖ Force sync completed for ${stationId}: ${result}`);
      return true;
    } catch (error) {
      logger.error(`Error force syncing station ${stationId}:`, error);
      return false;
    }
  }

  // Sync v·ªõi owner ID c·ª• th·ªÉ
  async syncStationsByOwner(ownerId) {
    try {
      logger.info(`üîÑ Syncing stations for owner: ${ownerId}`);
      
      const liveStations = await realtimeService.getAllStationsLiveData();
      if (!liveStations) {
        logger.info('No live stations found');
        return { synced: 0, skipped: 0 };
      }

      let syncedCount = 0;
      let skippedCount = 0;

      for (const [stationId, liveData] of Object.entries(liveStations)) {
        // Ch·ªâ sync stations c·ªßa owner n√†y ho·∫∑c stations ch∆∞a c√≥ owner
        if (liveData.ownerId === ownerId || !liveData.ownerId) {
          try {
            // ƒê·∫∑t ownerId cho station
            const dataWithOwner = { ...liveData, ownerId };
            const result = await this.syncSingleStation(stationId, dataWithOwner);
            
            if (result !== 'skipped') {
              syncedCount++;
              logger.info(`‚úÖ Synced station ${stationId} for owner ${ownerId}`);
            } else {
              skippedCount++;
            }
          } catch (error) {
            logger.error(`Error syncing station ${stationId} for owner ${ownerId}:`, error);
            skippedCount++;
          }
        }
      }

      logger.info(`‚úÖ Owner sync completed: ${syncedCount} synced, ${skippedCount} skipped`);
      return { synced: syncedCount, skipped: skippedCount };
    } catch (error) {
      logger.error(`Error syncing stations for owner ${ownerId}:`, error);
      return { synced: 0, skipped: 0 };
    }
  }

  // Cleanup stations kh√¥ng c√≤n online
  async cleanupOfflineStations() {
    if (!firestoreService.isAvailable()) return;

    try {
      const cutoffTime = Date.now() - (24 * 60 * 60 * 1000); // 24 gi·ªù tr∆∞·ªõc
      const allStations = await firestoreService.getAllStations();
      
      let cleanedCount = 0;
      
      for (const station of allStations) {
        if (station.status === 'offline' && 
            station.lastHeartbeat && 
            station.lastHeartbeat < cutoffTime) {
          
          // Ki·ªÉm tra xem station c√≤n t·ªìn t·∫°i trong realtime kh√¥ng
          const liveData = await realtimeService.getStationLiveData(station.id);
          
          if (!liveData) {
            // X√≥a station kh·ªèi Firestore n·∫øu kh√¥ng c√≤n trong realtime
            await firestoreService.db.collection('stations').doc(station.id).delete();
            logger.info(`üóëÔ∏è Cleaned up offline station: ${station.id}`);
            cleanedCount++;
          }
        }
      }
      
      if (cleanedCount > 0) {
        logger.info(`üßπ Cleanup completed: ${cleanedCount} stations removed`);
      }
    } catch (error) {
      logger.error('Error cleaning up offline stations:', error);
    }
  }

  // Get status
  getStatus() {
    return {
      isRunning: this.isRunning,
      lastSyncTime: this.lastSyncTime,
      syncMode: 'on-demand' // Ch·ªâ sync khi c·∫ßn thi·∫øt
    };
  }
}

export const syncService = new SyncService();
