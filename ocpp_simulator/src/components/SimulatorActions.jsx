import { useState } from 'react';
import './SimulatorActions.css';

const SimulatorActions = ({ 
  onRunPreset, 
  onExportLogs, 
  isConnected,
  logs,
  connectors,
  onSetCumulativeMeter // Th√™m prop m·ªõi
}) => {
  const [isRunningPreset, setIsRunningPreset] = useState(false);
  const [autoMeterEnabled, setAutoMeterEnabled] = useState(true);

  const handleRunPreset = async () => {
    if (!isConnected) {
      alert('Vui l√≤ng k·∫øt n·ªëi tr∆∞·ªõc khi ch·∫°y preset!');
      return;
    }

    setIsRunningPreset(true);
    try {
      await onRunPreset();
    } catch (error) {
      alert(`L·ªói khi ch·∫°y preset: ${error.message}`);
    } finally {
      setIsRunningPreset(false);
    }
  };

  const handleExportLogs = () => {
    if (!logs || logs.length === 0) {
      alert('Kh√¥ng c√≥ logs ƒë·ªÉ xu·∫•t!');
      return;
    }

    try {
      onExportLogs();
    } catch (error) {
      alert(`L·ªói khi xu·∫•t logs: ${error.message}`);
    }
  };

  const getLogSummary = () => {
    if (!logs || logs.length === 0) {
      return { total: 0, calls: 0, results: 0, errors: 0 };
    }

    const summary = logs.reduce((acc, log) => {
      acc.total++;
      if (log.type === 'call') acc.calls++;
      else if (log.type === 'callresult') acc.results++;
      else if (log.type === 'callerror') acc.errors++;
      return acc;
    }, { total: 0, calls: 0, results: 0, errors: 0 });

    return summary;
  };

  const logSummary = getLogSummary();

  return (
    <div className="simulator-actions">
      <h2>Simulator Actions</h2>
      
      <div className="actions-grid">
        {/* Auto Meter Control */}
        <div className="action-section">
          <h3>C·∫•u h√¨nh</h3>
          <div className="setting-item">
            <label className="toggle-switch">
              <input
                type="checkbox"
                checked={autoMeterEnabled}
                onChange={(e) => setAutoMeterEnabled(e.target.checked)}
              />
              <span className="slider"></span>
            </label>
            <span>Auto Meter Values</span>
          </div>
          <p className="setting-description">
            T·ª± ƒë·ªông g·ª≠i MeterValues khi ƒëang s·∫°c (5s/l·∫ßn)
          </p>
        </div>

        {/* Preset Actions */}
        <div className="action-section">
          <h3>H√†nh ƒë·ªông nhanh</h3>
          <button
            className="btn btn-primary btn-large"
            onClick={handleRunPreset}
            disabled={!isConnected || isRunningPreset}
          >
            {isRunningPreset ? (
              <>ƒêang ch·∫°y preset...</>
            ) : (
              <>Ch·∫°y Preset Demo</>
            )}
          </button>
          <p className="action-description">
            Boot ‚Üí Available ‚Üí Pre-check OK ‚Üí Start ‚Üí 4√óMeter ‚Üí Stop ‚Üí Available
          </p>
        </div>

        {/* Log Management */}
        <div className="action-section">
          <h3>Qu·∫£n l√Ω Logs</h3>
          <div className="log-stats">
            <div className="stat-item">
              <span className="stat-number">{logSummary.total}</span>
              <span className="stat-label">T·ªïng messages</span>
            </div>
            <div className="stat-item">
              <span className="stat-number">{logSummary.calls}</span>
              <span className="stat-label">CALL</span>
            </div>
            <div className="stat-item">
              <span className="stat-number">{logSummary.results}</span>
              <span className="stat-label">RESULT</span>
            </div>
            <div className="stat-item">
              <span className="stat-number">{logSummary.errors}</span>
              <span className="stat-label">ERROR</span>
            </div>
          </div>
          <button
            className="btn btn-secondary"
            onClick={handleExportLogs}
            disabled={!logs || logs.length === 0}
          >
            Xu·∫•t Logs (.json)
          </button>
        </div>

        {/* Meter Management */}
        <div className="action-section">
          <h3>Qu·∫£n l√Ω Cumulative Meter</h3>
          <div className="meter-controls">
            <p>Simulate m√°y m·ªõi vs m√°y ƒëang ho·∫°t ƒë·ªông:</p>
            <div className="meter-buttons">
              <button
                className="btn btn-secondary"
                onClick={() => onSetCumulativeMeter('reset')}
                disabled={!isConnected}
                title="Reset t·∫•t c·∫£ connector v·ªÅ 0 Wh (m√°y m·ªõi)"
              >
                M√°y m·ªõi (0 Wh)
              </button>
              <button
                className="btn btn-secondary"
                onClick={() => onSetCumulativeMeter('existing')}
                disabled={!isConnected}
                title="Set cumulative meter l·ªõn (m√°y ƒëang ho·∫°t ƒë·ªông)"
              >
                M√°y ho·∫°t ƒë·ªông (25k Wh)
              </button>
            </div>
            {connectors && connectors.length > 0 && (
              <div className="current-meters">
                <small>Cumulative meter hi·ªán t·∫°i:</small>
                {connectors.map(conn => (
                  <div key={conn.id} className="meter-display">
                    <span>Connector {conn.id}: {(conn.cumulativeMeter || 0).toLocaleString()} Wh</span>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* Connection Info */}
        <div className="action-section">
          <h3>Th√¥ng tin k·∫øt n·ªëi</h3>
          <div className="connection-stats">
            <div className="stat-row">
              <span>Tr·∫°ng th√°i:</span>
              <span className={`status ${isConnected ? 'connected' : 'disconnected'}`}>
                {isConnected ? 'üü¢ K·∫øt n·ªëi' : 'üî¥ Ng·∫Øt k·∫øt n·ªëi'}
              </span>
            </div>
            <div className="stat-row">
              <span>WebSocket URL:</span>
              <span className="url">{import.meta.env.VITE_OCPP_WS || 'Ch∆∞a c·∫•u h√¨nh'}</span>
            </div>
            <div className="stat-row">
              <span>Auto Meter:</span>
              <span className={`status ${autoMeterEnabled ? 'enabled' : 'disabled'}`}>
                {autoMeterEnabled ? '‚úÖ B·∫≠t' : '‚ùå T·∫Øt'}
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SimulatorActions;
