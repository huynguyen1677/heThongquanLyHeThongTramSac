export class MeterTimer {
    /**
   * Constructor c·ªßa MeterTimer.
   * @param {number} connectorId - ID c·ªßa c·ªïng s·∫°c.
   * @param {OcppClient} ocppClient - ƒê·ªëi t∆∞·ª£ng client ƒë·ªÉ g·ª≠i tin nh·∫Øn OCPP.
   */

  constructor(connectorId, ocppClient) {
    this.ocppClient = ocppClient;
    this.connectorId = connectorId;

    this.timer = null; // ƒê·ªÉ l∆∞u ID c·ªßa setInterval
    this.isRunning = false; // C·ªù cho bi·∫øt timer c√≥ ƒëang ch·∫°y kh√¥ng
    this.interval = 5000; // M·∫∑c ƒë·ªãnh g·ª≠i MeterValues m·ªói 5 gi√¢y

    // C√°c th√¥ng tin v·ªÅ phi√™n s·∫°c hi·ªán t·∫°i
    this.transactionId = null;
    this.meterStart = 0; // Gi√° tr·ªã meter l√∫c b·∫Øt ƒë·∫ßu
    this.currentMeterValue = 0; // Gi√° tr·ªã meter hi·ªán t·∫°i (t√≠nh b·∫±ng Wh)
    this.powerKw = 3.5; // C√¥ng su·∫•t s·∫°c m·∫∑c ƒë·ªãnh (kW)
    this.startTime = null; // Th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu s·∫°c
  }

  /**
   * B·∫Øt ƒë·∫ßu b·ªô ƒë·∫øm th·ªùi gian cho m·ªôt phi√™n s·∫°c.
   * @param {number} transactionId - ID c·ªßa phi√™n giao d·ªãch.
   * @param {number} meterStart - Gi√° tr·ªã meter l√∫c b·∫Øt ƒë·∫ßu (Wh).
   * @param {number} powerKw - C√¥ng su·∫•t s·∫°c (kW).
   * @param {number} intervalSeconds - Chu k·ª≥ g·ª≠i MeterValues (gi√¢y).
   */

  // Start meter timer for a transaction
  start(transactionId, meterStart, powerKw = 3.5, intervalSeconds = 5) {
    if (this.isRunning) {
      this.stop();
    }

    this.transactionId = transactionId;
    this.meterStart = meterStart;
    this.currentMeterValue = meterStart;
    this.powerKw = powerKw;
    this.interval = intervalSeconds * 1000;
    this.startTime = new Date();
    this.isRunning = true;

    this.log(`üîã B·∫Øt ƒë·∫ßu meter timer cho transaction ${transactionId}, c√¥ng su·∫•t: ${powerKw}kW`);

    // G·ª≠i gi√° tr·ªã meter ƒë·∫ßu ti√™n ngay l·∫≠p t·ª©c
    this.sendMeterValues();

    // L√™n l·ªãch g·ª≠i ƒë·ªãnh k·ª≥
    this.timer = setInterval(() => {
      this.sendMeterValues();
    }, this.interval);
  }

  /**
   * D·ª´ng b·ªô ƒë·∫øm th·ªùi gian.
   */
  stop() {
    if (this.timer) {
      clearInterval(this.timer);
      this.timer = null;
    }
    this.isRunning = false;
    
    if (this.transactionId) {
      this.log(`üîã ƒê√£ d·ª´ng meter timer cho transaction ${this.transactionId}`);
    }
  }

    /**
   * L·∫•y c√°c th√¥ng s·ªë s·∫°c hi·ªán t·∫°i ƒë·ªÉ hi·ªÉn th·ªã tr√™n UI.
   * @returns {object}
   */
  getChargingStats() {
    const energyKwh = (this.currentMeterValue - this.meterStart) / 1000;
    const pricePerKwh = 2380; // Gi√° ƒëi·ªán gi·∫£ ƒë·ªãnh
    const cost = energyKwh * pricePerKwh;

    return {
      transactionId: this.transactionId,
      currentMeterValue: Math.round(this.currentMeterValue),
      energyKwh: energyKwh,
      powerKw: this.powerKw,
      duration: this.getChargingDuration(),
      estimatedCost: Math.round(cost / 100) * 100, // L√†m tr√≤n ƒë·∫øn trƒÉm ƒë·ªìng
      isRunning: this.isRunning
    };
  }

  /**
   * L·∫•y th·ªùi gian s·∫°c ƒë√£ tr√¥i qua.
   * @returns {string} Chu·ªói th·ªùi gian "HH:MM:SS".
   */
  getChargingDuration() {
    if (!this.startTime) return '00:00:00';

    const diffMs = new Date() - this.startTime;
    const hours = Math.floor(diffMs / 3600000).toString().padStart(2, '0');
    const minutes = Math.floor((diffMs % 3600000) / 60000).toString().padStart(2, '0');
    const seconds = Math.floor((diffMs % 60000) / 1000).toString().padStart(2, '0');
    return `${hours}:${minutes}:${seconds}`;
  }

  /**
   * L·∫•y gi√° tr·ªã meter hi·ªán t·∫°i.
   * @returns {number}
   */
  getCurrentMeterValue() {
    return Math.round(this.currentMeterValue);
  }

  /**
   * Ki·ªÉm tra xem timer c√≥ ƒëang ch·∫°y kh√¥ng.
   * @returns {boolean}
   */
  isActive() {
    return this.isRunning;
  }

  /**
   * Ghi log ra console ƒë·ªÉ debug.
   * @param {string} message - N·ªôi dung log.
   * @param {'info' | 'error'} level - C·∫•p ƒë·ªô log.
   */
  log(message, level = 'info') {
    const timestamp = new Date().toISOString();
    const logMessage = `[Meter-${this.connectorId}] ${message}`;
    
    if (level === 'error') {
      console.error(`[${timestamp}] ${logMessage}`);
    } else {
      console.log(`[${timestamp}] ${logMessage}`);
    }
  }

  // Update power during charging
  setPower(powerKw) {
    this.powerKw = powerKw;
    this.log(`‚ö° Power updated to ${powerKw}kW`);
  }

  /**
   * T√≠nh to√°n v√† g·ª≠i tin nh·∫Øn MeterValues.
   */
  sendMeterValues() {
    if (!this.isRunning || !this.transactionId) {
      return;
    }

    // 1. T√≠nh to√°n l∆∞·ª£ng ƒëi·ªán nƒÉng ti√™u th·ª• trong chu k·ª≥ v·ª´a qua
    const deltaTimeHours = this.interval / (1000 * 3600); // ƒê·ªïi mili-gi√¢y sang gi·ªù
    const deltaWh = this.powerKw * 1000 * deltaTimeHours; // ƒê·ªïi kW sang W, r·ªìi t√≠nh Wh 

    // 2. C·∫≠p nh·∫≠t t·ªïng gi√° tr·ªã meter
    this.currentMeterValue += deltaWh;


    // 3. T·∫°o payload theo chu·∫©n OCPP 1.6-J
    const payload = {
      connectorId: this.connectorId,
      transactionId: this.transactionId,
      meterValue: [
        {
          timestamp: new Date().toISOString(),
          sampledValue: [
            {
              // T·ªïng nƒÉng l∆∞·ª£ng ƒë√£ s·∫°c (lu√¥n tƒÉng)
              value: Math.round(this.currentMeterValue).toString(),
              measurand: 'Energy.Active.Import.Register',
              unit: 'Wh'
            },
            {
              // C√¥ng su·∫•t s·∫°c t·ª©c th·ªùi
              value: Math.round(this.powerKw * 1000).toString(),
              measurand: 'Power.Active.Import',
              unit: 'W'
            }
          ]
        }
      ]
    };

    // 4. G·ª≠i tin nh·∫Øn ƒëi b·∫±ng ocppClient
    this.ocppClient.sendCall('MeterValues', payload)
      .catch((error) => {
        this.log(`‚ùå L·ªói khi g·ª≠i meter values: ${error.message}`, 'error');
      });
  }

  // Get energy consumed in kWh
  getEnergyConsumed() {
    return (this.currentMeterValue - this.meterStart) / 1000;
  }


  // Calculate estimated cost (flat rate)
  getEstimatedCost() {
    const pricePerKwh = 2380; // VND per kWh
    const energyKwh = this.getEnergyConsumed();
    const cost = energyKwh * pricePerKwh;
    
    // Round to nearest 100 VND
    return Math.round(cost / 100) * 100;
  }


  // Get transaction ID
  getTransactionId() {
    return this.transactionId;
  }
}
